{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "0acc0691",
   "metadata": {
    "vscode": {
     "languageId": "plaintext"
    }
   },
   "outputs": [],
   "source": [
    "# geometric_generator.py\n",
    "# Generador simple de imágenes con figuras geométricas.\n",
    "# Requiere: pillow (PIL) -> pip install pillow\n",
    "\n",
    "import random\n",
    "import math\n",
    "import argparse\n",
    "from dataclasses import dataclass\n",
    "from typing import Tuple, List\n",
    "from PIL import Image, ImageDraw, ImageFilter\n",
    "\n",
    "# Paletas de color opcionales\n",
    "PALETTES = {\n",
    "    \"vivid\": [\n",
    "        (231, 76, 60), (46, 204, 113), (52, 152, 219),\n",
    "        (155, 89, 182), (241, 196, 15), (230, 126, 34),\n",
    "        (26, 188, 156), (52, 73, 94)\n",
    "    ],\n",
    "    \"pastel\": [\n",
    "        (255, 179, 186), (255, 223, 186), (255, 255, 186),\n",
    "        (186, 255, 201), (186, 225, 255), (213, 198, 255)\n",
    "    ],\n",
    "    \"mono\": [(30, 30, 30), (60, 60, 60), (90, 90, 90), (120, 120, 120), (150, 150, 150)],\n",
    "    \"neon\": [(57,255,20), (255,20,147), (0,255,255), (255,255,0), (255,105,180)]\n",
    "}\n",
    "\n",
    "@dataclass\n",
    "class Config:\n",
    "    width: int = 1024\n",
    "    height: int = 1024\n",
    "    shapes: int = 120\n",
    "    palette: str = \"vivid\"\n",
    "    bgcolor: Tuple[int, int, int] = (245, 246, 250)\n",
    "    outline_prob: float = 0.35\n",
    "    blur: float = 0.0\n",
    "    seed: int = None\n",
    "    transparent: bool = False\n",
    "\n",
    "def rand_color(palette: List[Tuple[int,int,int]]) -> Tuple[int,int,int,int]:\n",
    "    c = random.choice(palette)\n",
    "    # Opacidad aleatoria suave para capas interesantes\n",
    "    alpha = random.randint(110, 255)\n",
    "    return (c[0], c[1], c[2], alpha)\n",
    "\n",
    "def random_point(w: int, h: int) -> Tuple[int, int]:\n",
    "    return random.randint(0, w), random.randint(0, h)\n",
    "\n",
    "def draw_circle(draw: ImageDraw.ImageDraw, bbox: Tuple[int,int,int,int], fill, outline, width: int):\n",
    "    draw.ellipse(bbox, fill=fill, outline=outline, width=width)\n",
    "\n",
    "def draw_rect(draw: ImageDraw.ImageDraw, bbox: Tuple[int,int,int,int], fill, outline, width: int):\n",
    "    draw.rectangle(bbox, fill=fill, outline=outline, width=width)\n",
    "\n",
    "def draw_line(draw: ImageDraw.ImageDraw, p1: Tuple[int,int], p2: Tuple[int,int], fill, width: int):\n",
    "    draw.line([p1, p2], fill=fill, width=width)\n",
    "\n",
    "def draw_triangle(draw: ImageDraw.ImageDraw, pts: List[Tuple[int,int]], fill, outline, width: int):\n",
    "    draw.polygon(pts, fill=fill, outline=outline)\n",
    "    if outline and width > 1:\n",
    "        draw.line(pts + [pts[0]], fill=outline, width=width)\n",
    "\n",
    "def draw_polygon(draw: ImageDraw.ImageDraw, pts: List[Tuple[int,int]], fill, outline, width: int):\n",
    "    draw.polygon(pts, fill=fill, outline=outline)\n",
    "    if outline and width > 1:\n",
    "        draw.line(pts + [pts[0]], fill=outline, width=width)\n",
    "\n",
    "def random_bbox(w: int, h: int, min_size: int = 20, max_size: int = None) -> Tuple[int,int,int,int]:\n",
    "    if max_size is None:\n",
    "        max_size = min(w, h) // 2\n",
    "    x1, y1 = random_point(w, h)\n",
    "    dx = random.randint(min_size, max_size)\n",
    "    dy = random.randint(min_size, max_size)\n",
    "    return (x1, y1, min(w, x1 + dx), min(h, y1 + dy))\n",
    "\n",
    "def random_poly_points(w: int, h: int, n: int) -> List[Tuple[int,int]]:\n",
    "    return [random_point(w, h) for _ in range(n)]\n",
    "\n",
    "def generate(cfg: Config, out_path: str):\n",
    "    if cfg.seed is not None:\n",
    "        random.seed(cfg.seed)\n",
    "\n",
    "    mode = \"RGBA\" if (cfg.transparent or cfg.blur > 0) else \"RGB\"\n",
    "    bg = (0,0,0,0) if cfg.transparent else cfg.bgcolor\n",
    "    img = Image.new(mode, (cfg.width, cfg.height), bg)\n",
    "    draw = ImageDraw.Draw(img, \"RGBA\")\n",
    "\n",
    "    palette = PALETTES.get(cfg.palette, PALETTES[\"vivid\"])\n",
    "\n",
    "    for _ in range(cfg.shapes):\n",
    "        shape_type = random.choices(\n",
    "            [\"circle\",\"rect\",\"line\",\"triangle\",\"polygon\"],\n",
    "            weights=[25,25,15,20,15], k=1\n",
    "        )[0]\n",
    "\n",
    "        fill = rand_color(palette)\n",
    "        outline = None\n",
    "        outline_width = 0\n",
    "\n",
    "        if random.random() < cfg.outline_prob:\n",
    "            # Outline con un gris al azar\n",
    "            g = random.randint(40, 160)\n",
    "            outline = (g, g, g, random.randint(120, 220))\n",
    "            outline_width = random.randint(1, 6)\n",
    "\n",
    "        if shape_type == \"circle\":\n",
    "            bbox = random_bbox(cfg.width, cfg.height)\n",
    "            draw_circle(draw, bbox, fill, outline, outline_width)\n",
    "\n",
    "        elif shape_type == \"rect\":\n",
    "            bbox = random_bbox(cfg.width, cfg.height)\n",
    "            draw_rect(draw, bbox, fill, outline, outline_width)\n",
    "        elif shape_type == \"line\":\n",
    "            p1 = random_point(cfg.width, cfg.height)\n",
    "            # Líneas con longitud mínima\n",
    "            angle = random.random() * 2 * math.pi\n",
    "            length = random.randint(30, min(cfg.width, cfg.height) // 2)\n",
    "            p2 = (min(max(int(p1[0] + length * math.cos(angle)), 0), cfg.width),\n",
    "                  min(max(int(p1[1] + length * math.sin(angle)), 0), cfg.height))\n",
    "            lw = random.randint(1, 8)\n",
    "            col = rand_color(palette)\n",
    "            draw_line(draw, p1, p2, col, lw)\n",
    "\n",
    "        elif shape_type == \"triangle\":\n",
    "            pts = random_poly_points(cfg.width, cfg.height, 3)\n",
    "            draw_triangle(draw, pts, fill, outline, outline_width)\n",
    "\n",
    "        else:  # polygon\n",
    "            n = random.randint(4, 7)\n",
    "            pts = random_poly_points(cfg.width, cfg.height, n)\n",
    "            draw_polygon(draw, pts, fill, outline, outline_width)\n",
    "\n",
    "    if cfg.blur > 0:\n",
    "        img = img.filter(ImageFilter.GaussianBlur(radius=cfg.blur))\n",
    "\n",
    "    # Optimiza PNG y JPEG\n",
    "    save_kwargs = {}\n",
    "    if out_path.lower().endswith((\".jpg\", \".jpeg\")):\n",
    "        save_kwargs.update({\"quality\": 95, \"optimize\": True})\n",
    "        if mode == \"RGBA\":\n",
    "            # Convertir a RGB para JPEG (sin transparencia)\n",
    "            img = img.convert(\"RGB\")\n",
    "    else:\n",
    "        save_kwargs.update({\"optimize\": True})\n",
    "\n",
    "    img.save(out_path, **save_kwargs)\n",
    "\n",
    "\n",
    "def parse_rgb(s: str) -> Tuple[int,int,int]:\n",
    "    r, g, b = [int(v) for v in s.split(\",\")]\n",
    "    return (r, g, b)\n",
    "\n",
    "# Define configuration and generate image directly\n",
    "cfg = Config(\n",
    "    width=800,\n",
    "    height=600,\n",
    "    shapes=150,\n",
    "    palette=\"neon\",\n",
    "    bgcolor=(20, 20, 20),\n",
    "    outline_prob=0.5,\n",
    "    blur=1.0,\n",
    "    seed=123,\n",
    "    transparent=False\n",
    ")\n",
    "# geometric_generator.py\n",
    "# Generador de múltiples imágenes geométricas\n",
    "\n",
    "# ... (importaciones y funciones anteriores permanecen igual) ...\n",
    "\n",
    "# Cambia este bloque al final del archivo:\n",
    "\n",
    "if __name__ == \"__main__\":\n",
    "    NUM_IMAGENES = 10  # Número de imágenes a generar\n",
    "\n",
    "    for i in range(NUM_IMAGENES):\n",
    "        seed = random.randint(0, 99999)\n",
    "        cfg = Config(\n",
    "            width=800,\n",
    "            height=600,\n",
    "            shapes=random.randint(80, 200),  # Varía la cantidad de formas\n",
    "            palette=random.choice(list(PALETTES.keys())),  # Cambia paleta cada vez\n",
    "            bgcolor=(random.randint(10, 60), random.randint(10, 60), random.randint(10, 60)),\n",
    "            outline_prob=random.uniform(0.2, 0.6),\n",
    "            blur=random.uniform(0.0, 2.0),\n",
    "            seed=seed,\n",
    "            transparent=False\n",
    "        )\n",
    "        output_filename = f\"imagen_generada_{i+1:02d}.png\"\n",
    "        generate(cfg, output_filename)\n",
    "        print(f\"✅ Imagen {i+1} generada: {output_filename}\")"
   ]
  }
 ],
 "metadata": {
  "language_info": {
   "name": "python"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
